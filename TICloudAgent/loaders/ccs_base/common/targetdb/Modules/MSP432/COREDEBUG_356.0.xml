<module id="COREDEBUG" HW_revision="356.0">
    <register id="DHCSR" width="32" offset="0xDF0" internal="0" description="Debug Halting Control and Status Register">
        <bitfield id="C_DEBUGEN" description="Enables debug. This can only be written by AHB-AP and not by the core. It is ignored when written by the core, which cannot set or clear it. The core must write a 1 to it when writing C_HALT to halt itself." begin="0" end="0" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="C_HALT" description="Halts the core. This bit is set automatically when the core Halts. For example Breakpoint. This bit clears on core reset. This bit can only be written if C_DEBUGEN is 1, otherwise it is ignored. When setting this bit to 1, C_DEBUGEN must also be written to 1 in the same value (value[1:0] is 2&apos;b11). The core can halt itself, but only if C_DEBUGEN is already 1 and only if it writes with b11)." begin="1" end="1" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="C_STEP" description="Steps the core in halted debug. When C_DEBUGEN = 0, this bit has no effect. Must only be modified when the processor is halted (S_HALT == 1)." begin="2" end="2" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="C_MASKINTS" description="Mask interrupts when stepping or running in halted debug. Does not affect NMI, which is not maskable. Must only be modified when the processor is halted (S_HALT == 1). Also does not affect fault exceptions and SVC caused by execution of the instructions. CMASKINTS must be set or cleared before halt is released. This means that the writes to set or clear C_MASKINTS and to set or clear C_HALT must be separate." begin="3" end="3" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="C_SNAPSTALL" description="If the core is stalled on a load/store operation the stall ceases and the instruction is forced to complete. This enables Halting debug to gain control of the core. It can only be set if: C_DEBUGEN = 1 and C_HALT = 1. The core reads S_RETIRE_ST as 0. This indicates that no instruction has advanced. This prevents misuse. The bus state is Unpredictable when this is used. S_RETIRE can detect core stalls on load/store operations." begin="5" end="5" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="S_REGRDY" description="Register Read/Write on the Debug Core Register Selector register is available. Last transfer is complete." begin="16" end="16" width="1" rwaccess="R">
        </bitfield>
        <bitfield id="S_HALT" description="The core is in debug state when S_HALT is set." begin="17" end="17" width="1" rwaccess="R">
        </bitfield>
        <bitfield id="S_SLEEP" description="Indicates that the core is sleeping (WFI, WFE, or SLEEP-ON-EXIT). Must use C_HALT to gain control or wait for interrupt to wake-up." begin="18" end="18" width="1" rwaccess="R">
        </bitfield>
        <bitfield id="S_LOCKUP" description="Reads as one if the core is running (not halted) and a lockup condition is present." begin="19" end="19" width="1" rwaccess="R">
        </bitfield>
        <bitfield id="S_RETIRE_ST" description="Indicates that an instruction has completed since last read. This is a sticky bit that clears on read. This determines if the core is stalled on a load/store or fetch." begin="24" end="24" width="1" rwaccess="R">
        </bitfield>
        <bitfield id="S_RESET_ST" description="Indicates that the core has been reset, or is now being reset, since the last time this bit was read. This a sticky bit that clears on read. So, reading twice and getting 1 then 0 means it was reset in the past. Reading twice and getting 1 both times means that it is being reset now (held in reset still)." begin="25" end="25" width="1" rwaccess="R">
        </bitfield>
    </register>
    <register id="DCRSR" width="32" offset="0xDF4" internal="0" description="Deubg Core Register Selector Register">
        <bitfield id="REGSEL" description="Register select" begin="4" end="0" width="5" rwaccess="R/W">
            <bitenum id="en_0b00000" value="0x0" description="R0"/>
            <bitenum id="en_0b00001" value="0x1" description="R1"/>
            <bitenum id="en_0b00010" value="0x2" description="R2"/>
            <bitenum id="en_0b00011" value="0x3" description="R3"/>
            <bitenum id="en_0b00100" value="0x4" description="R4"/>
            <bitenum id="en_0b00101" value="0x5" description="R5"/>
            <bitenum id="en_0b00110" value="0x6" description="R6"/>
            <bitenum id="en_0b00111" value="0x7" description="R7"/>
            <bitenum id="en_0b01000" value="0x8" description="R8"/>
            <bitenum id="en_0b01001" value="0x9" description="R9"/>
            <bitenum id="en_0b01010" value="0xA" description="R10"/>
            <bitenum id="en_0b01011" value="0xB" description="R11"/>
            <bitenum id="en_0b01100" value="0xC" description="R12"/>
            <bitenum id="en_0b01101" value="0xD" description="Current SP"/>
            <bitenum id="en_0b01110" value="0xE" description="LR"/>
            <bitenum id="en_0b01111" value="0xF" description="DebugReturnAddress"/>
            <bitenum id="en_0b10000" value="0x10" description="xPSR/flags, execution state information, and exception number"/>
            <bitenum id="en_0b10001" value="0x11" description="MSP (Main SP)"/>
            <bitenum id="en_0b10010" value="0x12" description="PSP (Process SP)"/>
            <bitenum id="en_0b10100" value="0x14" description="CONTROL bits [31:24], FAULTMASK bits [23:16], BASEPRI bits [15:8], PRIMASK bits [7:0]"/>
        </bitfield>
        <bitfield id="REGWNR" description="Write = 1, Read = 0" begin="16" end="16" width="1" rwaccess="R/W">
        </bitfield>
    </register>
    <register id="DCRDR" width="32" offset="0xDF8" internal="0" description="Debug Core Register Data Register">
    </register>
    <register id="DEMCR" width="32" offset="0xDFC" internal="0" description="Debug Exception and Monitor Control Register">
        <bitfield id="VC_CORERESET" description="Reset Vector Catch. Halt running system if Core reset occurs." begin="0" end="0" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="VC_MMERR" description="Debug trap on Memory Management faults." begin="4" end="4" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="VC_NOCPERR" description="Debug trap on Usage Fault access to Coprocessor that is not present or marked as not present in CAR register." begin="5" end="5" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="VC_CHKERR" description="Debug trap on Usage Fault enabled checking errors." begin="6" end="6" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="VC_STATERR" description="Debug trap on Usage Fault state errors." begin="7" end="7" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="VC_BUSERR" description="Debug Trap on normal Bus error." begin="8" end="8" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="VC_INTERR" description="Debug Trap on interrupt/exception service errors. These are a subset of other faults and catches before BUSERR or HARDERR." begin="9" end="9" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="VC_HARDERR" description="Debug trap on Hard Fault." begin="10" end="10" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="MON_EN" description="Enable the debug monitor. When enabled, the System handler priority register controls its priority level. If disabled, then all debug events go to Hard fault. C_DEBUGEN in the Debug Halting Control and Statue register overrides this bit. Vector catching is semi-synchronous. When a matching event is seen, a Halt is requested. Because the processor can only halt on an instruction boundary, it must wait until the next instruction boundary. As a result, it stops on the first instruction of the exception handler. However, two special cases exist when a vector catch has triggered: 1. If a fault is taken during vectoring, vector read or stack push error, the halt occurs on the corresponding fault handler, for the vector error or stack push. 2. If a late arriving interrupt comes in during vectoring, it is not taken. That is, an implementation that supports the late arrival optimization must suppress it in this case." begin="16" end="16" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="MON_PEND" description="Pend the monitor to activate when priority permits. This can wake up the monitor through the AHB-AP port. It is the equivalent to C_HALT for Monitor debug. This register does not reset on a system reset. It is only reset by a POR reset. Software in the reset handler or later, or by the DAP must enable the debug monitor." begin="17" end="17" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="MON_STEP" description="When MON_EN = 1, this steps the core. When MON_EN = 0, this bit is ignored. This is the equivalent to C_STEP. Interrupts are only stepped according to the priority of the monitor and settings of PRIMASK, FAULTMASK, or BASEPRI." begin="18" end="18" width="1" rwaccess="R/W">
        </bitfield>
        <bitfield id="MON_REQ" description="This enables the monitor to identify how it wakes up. This bit clears on a Core Reset." begin="19" end="19" width="1" rwaccess="R/W">
            <bitenum id="en_0b0" value="0x0" description="woken up by debug exception."/>
            <bitenum id="en_0b1" value="0x1" description="woken up by MON_PEND"/>
        </bitfield>
        <bitfield id="TRCENA" description="This bit must be set to 1 to enable use of the trace and debug blocks: Data Watchpoint and Trace (DWT), Instrumentation Trace Macrocell (ITM), Embedded Trace Macrocell (ETM), Trace Port Interface Unit (TPIU). This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger. Note that if no debug or trace components are present in the implementation then it is not possible to set TRCENA." begin="24" end="24" width="1" rwaccess="R/W">
        </bitfield>
    </register>
</module>
